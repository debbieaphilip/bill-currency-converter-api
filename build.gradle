plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.12'
	id 'io.spring.dependency-management' version '1.1.7'
	id "org.sonarqube" version "4.0.0.2929"
	id 'jacoco'
}

ext {
	set('springCloudVersion', "2023.0.1")
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

group = 'com.company'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

test {
	testLogging.showStandardStreams = true
	testLogging.showStackTraces = false
	testLogging.showExceptions = true
	testLogging.showCauses = true
	testLogging.exceptionFormat = 'full'
	maxParallelForks = 2
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
	}

	useJUnitPlatform()

	afterTest { desc, result ->
		logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
	}

	afterSuite { desc, result ->
		if (!desc.parent) {
			def output = "Result: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
			def startItem = '|  ', endItem = '  |'
			def repeatLength = startItem.length() + output.length() + endItem.length()
			println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
		}
	}

	finalizedBy jacocoTestReport

}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'com.auth0:java-jwt:3.19.2'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	compileOnly 'org.projectlombok:lombok:1.18.30'
	annotationProcessor 'org.projectlombok:lombok:1.18.30'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

sonarqube {
	properties {
		property "sonar.projectKey", "your-sonarcloud-project-key"
		property "sonar.organization", "your-sonarcloud-organization"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.login", project.findProperty("sonar.login") ?: System.getenv("SONAR_TOKEN")
	}
}

jacocoTestReport {
	reports {
		xml.required = true
	}
}

jacocoTestReport {
	reports {
		xml.required = true
	}
	dependsOn test
}

sonarqube {
	properties {
		property "sonar.projectKey", "debbieaphilip_bill-currency-converter-api"
		property "sonar.organization", "debbieaphilip"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}

tasks.named('sonarqube').configure {
	dependsOn jacocoTestReport
}

apply plugin: "org.sonarqube"
